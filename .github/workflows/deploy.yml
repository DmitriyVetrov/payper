name: Auto-Deploy ReceiptBot

on:
  push:
    branches: [ main ]
    paths:
      - 'ReceiptBot/**'
      - 'Dockerfile'
  workflow_dispatch:

env:
  DOCKER_IMAGE: receiptbot
  AZURE_RESOURCE_GROUP: ReceiptBot-RG  # Your existing resource group
  AZURE_CONTAINER_APP: receiptbot
  AZURE_LOCATION: westeurope

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    # 1. GET THE CODE
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    # 2. BUILD & PUSH TO DOCKER HUB (FREE)
    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: üî® Build & Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 3. DEPLOY TO AZURE (USE EXISTING RESOURCES)
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üèóÔ∏è Setup Container Apps Environment (If Needed)
      run: |
        echo "üèóÔ∏è Checking Container Apps environment..."
        
        # Only create Container Apps Environment if it doesn't exist
        if ! az containerapp env show --name receiptbot-env --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
          echo "Creating Container Apps environment..."
          az containerapp env create \
            --name receiptbot-env \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}
        else
          echo "Container Apps environment already exists"
        fi

    - name: üöÄ Deploy to Container Apps
      run: |
        image_name="${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        
        if az containerapp show --name ${{ env.AZURE_CONTAINER_APP }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
          echo "üîÑ Updating existing container app..."
          az containerapp update \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image $image_name \
            --set-env-vars \
              TELEGRAM_BOT_TOKEN=secretref:telegram-token \
              AZURE_DI_ENDPOINT=secretref:azure-di-endpoint \
              AZURE_DI_KEY=secretref:azure-di-key \
              AZURE_DI_MODEL=secretref:azure-di-model \
              DATABASE_CONNECTION_STRING="Data Source=/app/data/receipts.db" \
              ASPNETCORE_ENVIRONMENT=Production
        else
          echo "üÜï Creating new container app..."
          az containerapp create \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment receiptbot-env \
            --image $image_name \
            --min-replicas 0 \
            --max-replicas 1 \
            --cpu 0.25 \
            --memory 0.5Gi \
            --env-vars \
              TELEGRAM_BOT_TOKEN=secretref:telegram-token \
              AZURE_DI_ENDPOINT=secretref:azure-di-endpoint \
              AZURE_DI_KEY=secretref:azure-di-key \
              AZURE_DI_MODEL=secretref:azure-di-model \
              DATABASE_CONNECTION_STRING="Data Source=/app/data/receipts.db" \
              ASPNETCORE_ENVIRONMENT=Production \
            --secrets \
              telegram-token="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
              azure-di-endpoint="${{ secrets.AZURE_DI_ENDPOINT }}" \
              azure-di-key="${{ secrets.AZURE_DI_KEY }}" \
              azure-di-model="${{ secrets.AZURE_DI_MODEL }}"
        fi

        # Always update secrets to ensure they're current
        echo "üîÑ Updating secrets..."
        az containerapp secret set \
          --name ${{ env.AZURE_CONTAINER_APP }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --secrets \
            telegram-token="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
            azure-di-endpoint="${{ secrets.AZURE_DI_ENDPOINT }}" \
            azure-di-key="${{ secrets.AZURE_DI_KEY }}" \
            azure-di-model="${{ secrets.AZURE_DI_MODEL }}"

    - name: ‚úÖ Deployment Status
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì¶ Docker Image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        echo "üè† Resource Group: ${{ env.AZURE_RESOURCE_GROUP }} (existing)"
        echo "ü§ñ Container App: ${{ env.AZURE_CONTAINER_APP }}"
        echo "üîë Using your existing Azure Document Intelligence service"
        echo ""
        echo "üí∞ Cost optimization features:"
        echo "  ‚Ä¢ Scales to 0 when not in use"
        echo "  ‚Ä¢ Uses your existing Document Intelligence service"
        echo "  ‚Ä¢ Minimal CPU/Memory allocation (0.25 CPU, 0.5GB RAM)"
        echo "  ‚Ä¢ SQLite database (no Azure SQL costs)"

    - name: üîì Azure Logout
      if: always()
      run: az logout